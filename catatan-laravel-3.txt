find($id)mengambil id dan mengembalikan satu model. Jika tidak ada model yang cocok, ia akan mengembalikan null.

findOrFail($id)mengambil id dan mengembalikan satu model. Jika tidak ada model yang cocok, maka akan muncul kesalahan 1 .

first()mengembalikan catatan pertama yang ditemukan dalam database. Jika tidak ada model yang cocok, ia akan mengembalikan null.

firstOrFail()mengembalikan catatan pertama yang ditemukan dalam database. Jika tidak ada model yang cocok, maka akan muncul kesalahan 1 .

get()mengembalikan kumpulan model yang cocok dengan kueri.

pluck($column)mengembalikan kumpulan nilai saja di kolom tertentu. Di Laravel versi sebelumnya, metode ini disebut lists.

toArray()mengubah model/koleksi menjadi array PHP sederhana.


//// penjelasan cardinalitas dalam relationship table pada database
- one to one 
  Mempunyai pengertian setiap baris data pada tabel pertama dihubungkan hanya ke satu baris data pada tabel ke dua. Hubungan antara file   pertama dan file kedua adalah satu berbanding satu.

satu orang hanya memakai satu baju, satu baju hanya boleh di pakai satu orang


- one to many 
Mempunyai pengertian setiap baris data dari tabel pertama dapat dihubungkan ke satu baris atau lebih data pada tabel ke dua. Hubungan antara file pertama dan file kedua adalah satu berbanding banyak atau banyak berbanding satu. 

Satu Orang Memiliki Banyak Keterampilan, suatu Keterampilan tidak digunakan kembali antar Orang

- many to many
Mempunyai pengertian Satu baris atau lebih data pada tabel pertama bisa dihubugkan ke satu atau lebih baris data pada tabel ke dua. Artinya ada banyak baris di tabel satu dan tabel dua yang saling berhubungan satu sama lain. Hubunga tabel pertama dan tabel kedua adalah banyak berbanding banyak. 

Satu Orang Memiliki Banyak Keterampilan, suatu Keterampilan digunakan kembali antar Orang

//link pengertian sederhana tentang cardinalitas :
https://sellyselly23.blogspot.com/2017/08/contoh-one-to-one-one-to-many-many-to.html



contoh lain yang lebih mudah

- terdapat 2 tabel -> category dan product

1 category dapat memiliki banyak product -> namanya one to many -> in laravel => hasMany
1 product hanya memiliki satu category -> namanya one to one -> in laravel => belongsTo

kalau misalkan 1 category hanya boleh miliki satu product maka menggunakan hasOne dan belongsTo

- contoh yang kedua, terdapat 2 tabel -> postingan dan user

1 postingan hanya memiliki satu user -> one to one -> in laravel => belongsTo
1 user dapat memiliki banyak postingan -> one to many in laravel => hasMany


-- contoh ketiga dengan tiga tabel -> postingan, comments, user

//cardinalitasnya

- 1 postingan dapat memiliki banyak comments -> one to many -> in laravel => hasMany
- 1 comments hanya ada di satu postingan -> one to one -> in laravel => belongsTo
yang di atas artinya meskipun komentarnya sama tapi id nya berbeda, jadi itu termasuk hal berbeda lagi dari comments sebelumnya
- 1 comments hanya di tulis oleh satu user  -> one to one -> in laravel => belongsTo
- 1 user dapat menulis banyak comments -> one to many -> in laravel =. hasMany

jadi, tabel di atas saling berelasi, postingan berelasi ke comments dan comments berelasi ke user


//datables server side
https://yajrabox.com/docs/laravel-datatables/10.0
https://datatables.net/
https://datatables.net/examples/styling/bootstrap5.html
https://www.mynotescode.com/nomor-urut-datatables/
